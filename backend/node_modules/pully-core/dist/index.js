"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const ytdl_core_1 = require("ytdl-core");
const utils_1 = require("./utils");
__export(require("./utils"));
/**
 * Retrieves video data based on a YouTube URL. Rejects if the URL is invalid or the video does not exist.
 * @param url The YouTube video URL.
 */
function query(url) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!url)
            throw new Error(`A url must be specified!`);
        let now = new Date();
        const raw = yield ytdl_core_1.getInfo(url);
        return {
            raw,
            videoId: raw.video_id,
            videoTitle: raw.title,
            videoUrl: raw.video_url,
            channelId: raw.author.id,
            channelName: raw.author.name,
            channelUrl: raw.author.channel_url,
            thumbnails: utils_1.createThumbnails(raw.video_id),
            description: raw.description,
            published: new Date(raw.published),
            views: parseInt(raw.player_response.videoDetails.viewCount, 10),
            lastScanned: now,
            formats: raw.formats.map(rawFormat => {
                return {
                    raw: rawFormat,
                    audioBitrate: rawFormat.audioBitrate,
                    audioEncoding: rawFormat.audioEncoding,
                    bitrate: rawFormat.bitrate,
                    downloadSize: rawFormat.clen ? parseInt(rawFormat.clen, 10) : null,
                    container: rawFormat.container,
                    encoding: rawFormat.encoding,
                    fps: parseInt(rawFormat.fps || '0', 10),
                    itag: rawFormat.itag,
                    size: rawFormat.size,
                    resolution: parseInt(rawFormat.resolution || '0', 10) || (rawFormat.size && parseInt(rawFormat.size.split('x')[1], 10)) || 0,
                    type: rawFormat.type,
                    url: rawFormat.url
                };
            })
        };
    });
}
exports.query = query;
/**
 * Opens a stream to download a single 'track' (hd video, audio, or sd video+audio) from YouTube.
 * @param rawVideo The raw video details.
 * @param rawFormat The raw stream format details.
 */
function downloadFromInfo(rawVideo, rawFormat) {
    return ytdl_core_1.downloadFromInfo(rawVideo, { format: rawFormat });
}
exports.downloadFromInfo = downloadFromInfo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLHlDQUE4RTtBQUU5RSxtQ0FBMkM7QUFJM0MsNkJBQXdCO0FBRXhCOzs7R0FHRztBQUNILFNBQXNCLEtBQUssQ0FBQyxHQUFXOztRQUNyQyxJQUFJLENBQUMsR0FBRztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUN0RCxJQUFJLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3JCLE1BQU0sR0FBRyxHQUFHLE1BQU0sbUJBQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUvQixPQUFPO1lBQ0wsR0FBRztZQUNILE9BQU8sRUFBRSxHQUFHLENBQUMsUUFBUTtZQUNyQixVQUFVLEVBQUUsR0FBRyxDQUFDLEtBQUs7WUFDckIsUUFBUSxFQUFFLEdBQUcsQ0FBQyxTQUFTO1lBQ3ZCLFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDeEIsV0FBVyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSTtZQUM1QixVQUFVLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFXO1lBQ2xDLFVBQVUsRUFBRSx3QkFBZ0IsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDO1lBQzFDLFdBQVcsRUFBRSxHQUFHLENBQUMsV0FBVztZQUM1QixTQUFTLEVBQUUsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQztZQUNsQyxLQUFLLEVBQUUsUUFBUSxDQUFFLEdBQUcsQ0FBQyxlQUF1QixDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDO1lBQ3hFLFdBQVcsRUFBRSxHQUFHO1lBQ2hCLE9BQU8sRUFBRyxHQUFHLENBQUMsT0FBc0IsQ0FBQyxHQUFHLENBQWMsU0FBUyxDQUFDLEVBQUU7Z0JBRWhFLE9BQU87b0JBQ0wsR0FBRyxFQUFFLFNBQVM7b0JBQ2QsWUFBWSxFQUFFLFNBQVMsQ0FBQyxZQUFZO29CQUNwQyxhQUFhLEVBQUUsU0FBUyxDQUFDLGFBQWE7b0JBQ3RDLE9BQU8sRUFBRSxTQUFTLENBQUMsT0FBTztvQkFDMUIsWUFBWSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJO29CQUNsRSxTQUFTLEVBQUUsU0FBUyxDQUFDLFNBQVM7b0JBQzlCLFFBQVEsRUFBRSxTQUFTLENBQUMsUUFBUTtvQkFDNUIsR0FBRyxFQUFFLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLEdBQUcsRUFBRSxFQUFFLENBQUM7b0JBQ3ZDLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSTtvQkFDcEIsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJO29CQUNwQixVQUFVLEVBQUUsUUFBUSxDQUFDLFNBQVMsQ0FBQyxVQUFVLElBQUksR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDO29CQUM1SCxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7b0JBQ3BCLEdBQUcsRUFBRSxTQUFTLENBQUMsR0FBRztpQkFDbkIsQ0FBQztZQUNKLENBQUMsQ0FBQztTQUNILENBQUE7SUFDSCxDQUFDO0NBQUE7QUFyQ0Qsc0JBcUNDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQWdCLGdCQUFnQixDQUFDLFFBQWEsRUFBRSxTQUFjO0lBQzVELE9BQU8sNEJBQW9CLENBQUMsUUFBUSxFQUFFLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7QUFDL0QsQ0FBQztBQUZELDRDQUVDIn0=