/// <reference types="node" />
import { EventEmitter } from 'events';
import { QueryResult } from 'pully-core';
import { PullyOptions, DownloadConfig, DownloadResults, ProgressData, DownloadMode } from './lib/models';
import { Presets } from './lib/presets';
export { PullyOptions, DownloadConfig, Presets, ProgressData, DownloadResults, DownloadMode };
export declare interface Pully {
    on(event: 'query', listener: (args: QueryResult) => void): this;
    on(event: 'downloadstarted', listener: (args: DownloadConfig) => void): this;
    on(event: 'downloadcomplete', listener: (args: DownloadResults) => void): this;
    on(event: 'downloadcancelled', listener: (args: DownloadResults) => void): this;
    on(event: 'downloadfailed', listener: (args: {
        err: any;
        options: DownloadConfig;
    }) => void): this;
    on(event: 'progress', listener: (args: {
        progress: ProgressData;
        options: DownloadConfig;
    }) => void): this;
}
export declare class Pully extends EventEmitter {
    private _config?;
    private _presets;
    constructor(_config?: PullyOptions);
    query(url: string): Promise<QueryResult>;
    download(url: string): Promise<DownloadResults>;
    download(url: string, preset: string): Promise<DownloadResults>;
    download(options: DownloadConfig): Promise<DownloadResults>;
    private _formatConfig;
    private _registerPresets;
    private _getTemplate;
}
