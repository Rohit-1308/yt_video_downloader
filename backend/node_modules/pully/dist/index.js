"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const events_1 = require("events");
const debug = require("debug");
const pully_core_1 = require("pully-core");
const models_1 = require("./lib/models");
exports.DownloadMode = models_1.DownloadMode;
const download_1 = require("./lib/download");
const presets_1 = require("./lib/presets");
exports.Presets = presets_1.Presets;
const DEFAULT_TEMPLATE = '${videoTitle}__${channelName}';
const log = debug('pully:index');
class Pully extends events_1.EventEmitter {
    constructor(_config) {
        super();
        this._config = _config;
        this._presets = {};
        this._config = this._config || {};
        this._registerPresets(presets_1.DefaultPresets)._registerPresets(this._config.additionalPresets);
    }
    query(url) {
        return __awaiter(this, void 0, void 0, function* () {
            let results = yield pully_core_1.query(url);
            this.emit('query', results);
            return results;
        });
    }
    download(input, preset) {
        return __awaiter(this, void 0, void 0, function* () {
            const globalStart = Date.now();
            if (typeof input === 'string') {
                input = {
                    url: input,
                    preset
                };
            }
            let options = yield this._formatConfig(input);
            log(`Download started (strategy: ${options.mode})...`);
            this.emit('downloadstarted', options);
            let dlPromise = new download_1.Download(options, this).start();
            dlPromise.then(results => {
                results.duration = Date.now() - globalStart;
                if (results.cancelled) {
                    log(`Download cancelled... %o`, results);
                    this.emit('downloadcancelled', results);
                }
                else {
                    log(`Download complete... %o`, results);
                    this.emit('downloadcomplete', results);
                }
            }, err => this.emit('downloadfailed', { options, err }));
            return dlPromise;
        });
    }
    _formatConfig(input) {
        if (!input) {
            log(`No options detected!`);
            return Promise.reject(new Error(`No options detected!`));
        }
        if (!input.url) {
            log(`URL failed validation. No URL specified.`);
            return Promise.reject(new Error(`"${input.url}" is not a valid URL!`));
        }
        let output = {
            url: input.url,
            dir: null,
            preset: null,
            info: input.info || this._config.info || (() => { }),
            template: this._getTemplate(input.template),
            progress: input.progress,
            mode: input.mode || this._config.mode || models_1.DownloadMode.Parallel
        };
        // Resolve the directory...
        let specifiedDir = input.dir || this._config.dir;
        output.dir = specifiedDir ? path_1.resolve(specifiedDir) : null;
        // Resolve the preset...
        let specifiedPresetName = input.preset || this._config.preset || presets_1.Presets.HD;
        if (typeof specifiedPresetName !== 'string') {
            output.preset = specifiedPresetName;
        }
        else {
            let specifiedPreset = this._presets[specifiedPresetName];
            if (!specifiedPreset) {
                log(`No preset "${specifiedPresetName}"!`);
                let err = new Error(`No preset "${specifiedPresetName}"!`);
                this.emit('downloadfailed', { options: input, err });
                throw err;
            }
            output.preset = specifiedPreset;
        }
        return Promise.resolve(output);
    }
    _registerPresets(presets) {
        if (!presets)
            return this;
        log(`Registering ${presets.length} presets...`);
        presets.forEach(preset => this._presets[preset.name] = presets_1.prepPreset(preset));
        return this;
    }
    _getTemplate(localTemplate) {
        for (let format of [localTemplate, this._config.template, DEFAULT_TEMPLATE]) {
            if (!format)
                continue;
            if (typeof format === 'string') {
                return pully_core_1.template(format);
            }
            else {
                let formatFn = format;
                return (data) => formatFn(pully_core_1.scrubObject(data));
            }
        }
    }
}
exports.Pully = Pully;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLCtCQUE4QztBQUM5QyxtQ0FBc0M7QUFFdEMsK0JBQStCO0FBQy9CLDJDQUFvRjtBQUVwRix5Q0FBeUk7QUFRMUQsdUJBUnVCLHFCQUFZLENBUXZCO0FBUDNGLDZDQUEwQztBQUMxQywyQ0FBb0U7QUFNN0Isa0JBTjlCLGlCQUFPLENBTThCO0FBSjlDLE1BQU0sZ0JBQWdCLEdBQUcsK0JBQStCLENBQUM7QUFFekQsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBYWpDLE1BQWEsS0FBTSxTQUFRLHFCQUFZO0lBSXJDLFlBQW9CLE9BQXNCO1FBQ3hDLEtBQUssRUFBRSxDQUFDO1FBRFUsWUFBTyxHQUFQLE9BQU8sQ0FBZTtRQUZsQyxhQUFRLEdBQTRCLEVBQUUsQ0FBQztRQUk3QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyx3QkFBYyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3pGLENBQUM7SUFFWSxLQUFLLENBQUMsR0FBVzs7WUFDNUIsSUFBSSxPQUFPLEdBQUcsTUFBTSxrQkFBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQzVCLE9BQU8sT0FBTyxDQUFDO1FBQ2pCLENBQUM7S0FBQTtJQUtZLFFBQVEsQ0FBQyxLQUE4QixFQUFFLE1BQWU7O1lBQ25FLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUMvQixJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtnQkFDN0IsS0FBSyxHQUFH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