"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const stream_1 = require("stream");
const debug = require("debug");
const throttle = require('lodash.throttle');
const mkdirp = require('mkdirp-promise');
const ffmpegPath = require('@ffmpeg-installer/ffmpeg').path;
const ffmpeg = require("fluent-ffmpeg");
const tempRoot = path_1.join(require('temp-dir'), 'pully');
const log = debug('pully:download');
const pully_core_1 = require("pully-core");
const models_1 = require("./models");
const analyzer_1 = require("./analyzer");
const speedometer_1 = require("../utils/speedometer");
const human_1 = require("../utils/human");
const TEMP_AUDIO_EXT = 'm4a';
const TEMP_VIDEO_EXT = 'mp4';
class Download {
    constructor(_config, _emitter) {
        this._config = _config;
        this._emitter = _emitter;
        this._totalBytes = 0;
        this._downloadedBytes = 0;
        this._tempFiles = [];
        this._speedometer = new speedometer_1.Speedometer();
        this._emitProgress = throttle((indeterminate) => {
            if (indeterminate) {
                this._config.progress && this._config.progress({ indeterminate });
                return;
            }
            const elapsed = Date.now() - this._start;
            this._speedometer.record(this._downloadedBytes);
            const eta = this._speedometer.eta(this._totalBytes);
            const progress = {
                indeterminate: false,
                downloadedBytes: this._downloadedBytes,
                totalBytes: this._totalBytes,
                progress: this._progress,
                percent: Math.floor(this._progress * 10000) / 100,
                bytesPerSecond: this._speedometer.bytesPerSecond,
                downloadSpeed: this._speedometer.currentSpeed,
                elapsed,
                elapsedStr: human_1.toHumanTime(elapsed / 1000),
                eta,
                etaStr: human_1.toHumanTime(eta)
            };
            log(`${progress.percent}% downloaded (${progress.downloadedBytes}/${progress.totalBytes}) [${progress.elapsedStr} -> ${progress.etaStr}]...`);
            this._emitter.emit('progress', { progress, config: this._config });
            this._config.progress && this._config.progress(progress);
        }, 500, { leading: true, trailing: true });
    }
    get _progress() {
        if (!this._totalBytes || !this._downloadedBytes) {
            return 0;
        }
        return this._downloadedBytes / this._totalBytes;
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            this._start = Date.now();
            let cancellationReason = yield this._getFormats();
            if (cancellationReason) {
                return { path: null, format: this._format, duration: (Date.now() - this._start), cancelled: true, reason: cancellationReason };
            }
            this._totalBytes += (this._format.audio ? (this._format.audio.downloadSize || 0) : 0);
            this._totalBytes += (this._format.video ? (this._format.video.downloadSize || 0) : 0);
            this._emitProgress(); // Emit zero progress...
            const path = yield this._beginDownload();
            this._cleanup();
            return { path, format: this._format, duration: (Date.now() - this._start), cancelled: false };
        });
    }
    _getFormats() {
        return __awaiter(this, void 0, void 0, function* () {
            this._format = yield analyzer_1.getBestFormats(this._config.url, this._config.preset);
            this._format.path = yield this._getOutputPath();
            let cancelledReason;
            yield Promise.resolve(this._config.info(this._format, (msg) => cancelledReason = msg));
            if (cancelledReason) {
                let cancelStr = `Download Cancelled: "${cancelledReason}".`;
                log(cancelStr);
                return cancelStr;
            }
            else {
                return null;
            }
        });
    }
    _beginDownload() {
        return __awaiter(this, void 0, void 0, function* () {
            switch (this._config.mode) {
                case models_1.DownloadMode.Merge:
                    return this._downloadAudioAndMergeVideo();
                case models_1.DownloadMode.Sequential:
                    return this._downloadAudioThenVideoThenMerge();
                case models_1.DownloadMode.Parallel:
                    return this._downloadAudioAndVideoThenMerge();
                case models_1.DownloadMode.Parts:
                    return this._downloadPartsThenMerge();
            }
        });
    }
    _downloadAudioAndMergeVideo() {
        return __awaiter(this, void 0, void 0, function* () {
            let audioPath = yield this._getTempPath(TEMP_AUDIO_EXT);
            audioPath = yield this._downloadFile(this._format.audio, audioPath);
            let videoStream = null;
            if (this._format.video)
                videoStream = this._getDownloadStream(this._format.video);
            return this._processOutput(this._format.path, audioPath, videoStream);
        });
    }
    _downloadAudioThenVideoThenMerge() {
        return __awaiter(this, void 0, void 0, function* () {
            let audioPath = yield this._getTempPath(TEMP_AUDIO_EXT);
            yield this._downloadFile(this._format.audio, audioPath);
            let videoPath = null;
            if (this._format.video) {
                videoPath = yield this._getTempPath(TEMP_VIDEO_EXT);
                yield this._downloadFile(this._format.video, videoPath);
            }
            return this._processOutput(this._format.path, audioPath, videoPath);
        });
    }
    _downloadAudioAndVideoThenMerge() {
        return __awaiter(this, void 0, void 0, function* () {
            let audioPath = yield this._getTempPath(TEMP_AUDIO_EXT);
            let audioPromise = this._downloadFile(this._format.audio, audioPath);
            let videoPath = null;
            let videoPromise = Promise.resolve(null);
            if (this._format.video) {
                videoPath = yield this._getTempPath(TEMP_VIDEO_EXT);
                videoPromise = this._downloadFile(this._format.video, videoPath);
            }
            yield Promise.all([audioPromise, videoPromise]);
            return this._processOutput(this._format.path, audioPath, videoPath);
        });
    }
    _downloadPartsThenMerge() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Not yet implemented!');
        });
    }
    _getDownloadStream(format) {
        if (!this._format.data || !format) {
            throw new Error(`Missing required format!`);
        }
        return pully_core_1.downloadFromInfo(this._format.data.raw, format.raw).pipe(this._createProgressTracker());
    }
    _downloadFile(format, path) {
        return new Promise((resolve, reject) => {
            this._getDownloadStream(format)
                .pipe(fs_1.createWriteStream(path))
                .on('finish', () => resolve(path))
                .on('error', reject);
        });
    }
    _processOutput(outputPath, audioSrc, videoSrc) {
        let ffmpegCommand = this._createFfmpegCommand();
        if (this._config.preset.outputFormat) {
            ffmpegCommand = ffmpegCommand.format(this._config.preset.outputFormat);
        }
        if (audioSrc) {
            ffmpegCommand = ffmpegCommand.input(audioSrc);
            if (!this._config.preset.outputFormat)
                ffmpegCommand = ffmpegCommand.audioCodec('copy');
        }
        if (videoSrc) {
            ffmpegCommand = ffmpegCommand.input(videoSrc);
            if (!this._config.preset.outputFormat)
                ffmpegCommand = ffmpegCommand.videoCodec('copy');
        }
        return this._ffmpegSave(ffmpegCommand, outputPath, videoSrc && typeof videoSrc === 'string');
    }
    _getOutputPath() {
        return __awaiter(this, void 0, void 0, function* () {
            let ext = this._config.preset.outputFormat ? this._config.preset.outputFormat : (this._format.video || this._format.audio).container;
            let filename = this._config.template(this._format.data) + '.' + ext;
            let outDir = this._config.dir ? this._config.dir : tempRoot;
            return path_1.join(outDir, filename);
        });
    }
    _createProgressTracker() {
        return new stream_1.Transform({
            transform: (chunk, encoding, cb) => {
                this._downloadedBytes += chunk.length;
                this._emitProgress();
                cb(null, chunk);
            }
        });
    }
    _getTempPath(suffix) {
        return __awaiter(this, void 0, void 0, function* () {
            let tempPath = path_1.join(tempRoot, `${this._format.data.videoId}_${this._config.preset.name}.${suffix}`);
            yield mkdirp(tempRoot);
            this._tempFiles.push(tempPath);
            return tempPath;
        });
    }
    _createFfmpegCommand() {
        return ffmpeg()
            .setFfmpegPath(ffmpegPath)
            .outputOptions('-metadata', `title=${this._format.data.videoTitle}`)
            .outputOptions('-metadata', `author=${this._format.data.channelName}`).outputOptions('-metadata', `artist=${this._format.data.channelName}`)
            .outputOptions('-metadata', `description=${this._format.data.description}`).outputOptions('-metadata', `comment=${this._format.data.description}`)
            .outputOptions('-metadata', `episode_id=${this._format.data.videoId}`)
            .outputOptions('-metadata', `network=YouTube`);
    }
    _ffmpegSave(ffmpegCommand, path, indeterminate) {
        let dir = path_1.dirname(path);
        return mkdirp(dir).then(() => {
            return new Promise((resolve, reject) => {
                ffmpegCommand
                    .on('progress', (data) => this._emitProgress(indeterminate))
                    .on('error', (err, stdout, stderr) => {
                    console.error(JSON.stringify({ err, stdout, stderr }, null, '  '));
                    reject(err.message);
                })
                    .on('end', (stdout, stderr) => resolve(path))
                    .save(path);
            });
        });
    }
    _cleanup() {
        try {
            this._tempFiles.forEach(tempFile => {
                try {
                    fs_1.unlinkSync(tempFile);
                }
                catch (_a) { }
            });
        }
        catch (_a) { }
    }
}
exports.Download = Download;
//# sourceMappingURL=data:application/json;base64,