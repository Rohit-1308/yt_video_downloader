"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
//const testVideo = 'https://www.youtube.com/watch?v=oVXg7Grp1W8'; // 22s with music (9MB)
const testVideo = 'https://www.youtube.com/watch?v=aqz-KE-bpKQ'; // Big Buck Bunny, 10:34 4K (? MB)
const mp3Video = 'https://www.youtube.com/watch?v=dQw4w9WgXcQ';
(function () {
    return __awaiter(this, void 0, void 0, function* () {
        let p = new _1.Pully();
        p.download({
            url: mp3Video,
            dir: './output',
            preset: _1.Presets.MP3,
            info: (format, cancel) => {
                console.log('Verify: ' + format.downloadSize);
                // Limit download to ~3MB...    
                if (format.downloadSize > 3000000) {
                    cancel();
                }
            },
            progress: (data) => {
                if (data.indeterminate) {
                    console.log(`[${new Date().toUTCString()}] Working...`);
                }
                else {
                    console.log(`Progress: ${data.percent}%`);
                }
            }
        }).then((results) => {
            console.log(`Download Complete: "${results.path}"`);
            process.exit(0);
        }, err => {
            console.error('Uh oh!', err);
            process.exit(1);
        });
    });
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZGVidWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLHdCQUFtQztBQUVuQywwRkFBMEY7QUFDMUYsTUFBTSxTQUFTLEdBQUcsNkNBQTZDLENBQUMsQ0FBQyxrQ0FBa0M7QUFDbkcsTUFBTSxRQUFRLEdBQUcsNkNBQTZDLENBQUM7QUFFL0QsQ0FBQzs7UUFDQyxJQUFJLENBQUMsR0FBRyxJQUFJLFFBQUssRUFBRSxDQUFDO1FBRXBCLENBQUMsQ0FBQyxRQUFRLENBQUM7WUFDVCxHQUFHLEVBQUUsUUFBUTtZQUNiLEdBQUcsRUFBRSxVQUFVO1lBQ2YsTUFBTSxFQUFFLFVBQU8sQ0FBQyxHQUFHO1lBQ25CLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRTtnQkFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUU5QyxnQ0FBZ0M7Z0JBQ2hDLElBQUksTUFBTSxDQUFDLFlBQVksR0FBRyxPQUFPLEVBQUU7b0JBQ2pDLE1BQU0sRUFBRSxDQUFDO2lCQUNWO1lBQ0gsQ0FBQztZQUNELFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUNqQixJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7b0JBQ3RCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxjQUFjLENBQUMsQ0FBQztpQkFDekQ7cUJBQU07b0JBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO2lCQUMzQztZQUNILENBQUM7U0FDRixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsT0FBTyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7WUFDcEQsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQixDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUU7WUFDUCxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUM3QixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUFBLENBQUMsRUFBRSxDQUFDIn0=