"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs_1 = require("fs");
const ytdl = require("ytdl-core");
const ffmpeg = require("fluent-ffmpeg");
const deleteDir = require('rimraf').sync;
const benchmark_1 = require("benchmark");
const _1 = require(".");
const extraSmallVideo = 'https://www.youtube.com/watch?v=oVXg7Grp1W8'; // 22s with music (9MB)
const smallVideo = 'https://www.youtube.com/watch?v=LXb3EKWsInQ'; // Costa Rica 4K, 5:14 (169MB)
const longVideo = 'https://www.youtube.com/watch?v=aqz-KE-bpKQ'; // Big Buck Bunny, 10:34 4K (281 MB)
const videoToDownload = smallVideo;
let downloadSize = 0;
const modeSuite = new benchmark_1.Suite('Download Mode');
modeSuite.on('cycle', function (event) {
    let bm = event.target;
    let opsPerMin = formatOpsSpeed(bm);
    let downloadSpeed = formatDownloadSpeed(bm);
    let size = bm.stats.sample.length;
    console.log(`${bm.name}: [${downloadSpeed}] ${opsPerMin} \xb1${bm.stats.rme.toFixed(2)}% (${size} run${size == 1 ? '' : 's'} sampled)`);
});
modeSuite
    .add(downloadModeBenchmarkFor(_1.DownloadMode.Merge))
    .add(downloadModeBenchmarkFor(_1.DownloadMode.Sequential))
    .add(downloadModeBenchmarkFor(_1.DownloadMode.Parallel))
    .add(ytldCorBenchmark())
    .run({ async: false });
function downloadModeBenchmarkFor(mode) {
    let pully;
    let i = 0;
    let downloadPath;
    deleteDir(path_1.resolve(__dirname, `../temp/${mode}/*`));
    return {
        name: mode,
        defer: true,
        setup: () => {
            pully = new _1.Pully({
                dir: `./temp/${mode}`,
                preset: _1.Presets.HD,
                template: `output_${i++}`,
                mode
            });
        },
        fn: function (p) {
            return __awaiter(this, void 0, void 0, function* () {
                const result = yield pully.download(videoToDownload);
                downloadPath = result.path;
                downloadSize = result.format.downloadSize;
                p.resolve();
            });
        },
        teardown: () => {
            //deleteFile(downloadPath);
        }
    };
}
function ytldCorBenchmark() {
    const audioOutput = path_1.resolve(__dirname, '../temp/ytdl-core/sound.mp4');
    let i = 0;
    deleteDir(path_1.resolve(__dirname, `../temp/ytdl-core/*`));
    return {
        name: 'ytdl-core',
        defer: true,
        setup: () => {
        },
        fn: function (p) {
            return __awaiter(this, void 0, void 0, function* () {
                const mainOutput = path_1.resolve(__dirname, `../temp/ytdl-core/output_${i++}.mp4`);
                ytdl(videoToDownload, { filter: format => format.itag === '140' })
                    // Write audio to file since ffmpeg supports only one input stream.
                    .pipe(fs_1.createWriteStream(audioOutput))
                    .on('finish', () => {
                    ffmpeg()
                        .input(ytdl(videoToDownload, { filter: format => format.itag === '299' }))
                        .videoCodec('copy')
                        .input(audioOutput)
                        .audioCodec('copy')
                        .save(mainOutput)
                        .on('error', console.error)
                        // .on('progress', progress => {
                        //   process.stdout.write(progress.timemark);
                        // })
                        .on('end', () => {
                        fs_1.unlinkSync(audioOutput);
                        p.resolve();
                    });
                });
            });
        },
        teardown: () => {
            //deleteFile(mainOutput);
        }
    };
}
function formatDownloadSpeed(bm) {
    let bytesPerSecond = downloadSize / bm.stats.mean;
    let humanReadableSpeed = humanByteSize(bytesPerSecond);
    return `${humanReadableSpeed}/sec`;
}
function formatOpsSpeed(bm) {
    let speed = bm.hz;
    let unit = 'sec';
    if (speed < 1) {
        speed *= 60;
        unit = 'min';
    }
    if (speed < 1) {
        speed *= 60;
        unit = 'hour';
    }
    return `${benchmark_1.formatNumber((speed).toFixed(2))} ops/${unit}`;
}
function humanByteSize(bytes) {
    const threshold = 1024;
    if (Math.abs(bytes) < threshold) {
        return `${bytes} B`;
    }
    const units = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
    let u = -1;
    do {
        bytes /= threshold;
        ++u;
    } while (Math.abs(bytes) >= threshold && u < units.length - 1);
    return `${bytes.toFixed(1)} ${units[u]}`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVuY2htYXJrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2JlbmNobWFyay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsK0JBQThDO0FBQzlDLDJCQUFpRTtBQUVqRSxrQ0FBa0M7QUFDbEMsd0NBQXdDO0FBQ3hDLE1BQU0sU0FBUyxHQUE2QixPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDO0FBRW5FLHlDQUE2RTtBQUM3RSx3QkFBaUQ7QUFFakQsTUFBTSxlQUFlLEdBQUcsNkNBQTZDLENBQUMsQ0FBQyx1QkFBdUI7QUFDOUYsTUFBTSxVQUFVLEdBQUcsNkNBQTZDLENBQUMsQ0FBQyw4QkFBOEI7QUFDaEcsTUFBTSxTQUFTLEdBQUcsNkNBQTZDLENBQUMsQ0FBQyxvQ0FBb0M7QUFFckcsTUFBTSxlQUFlLEdBQUcsVUFBVSxDQUFDO0FBR25DLElBQUksWUFBWSxHQUFHLENBQUMsQ0FBQztBQUVyQixNQUFNLFNBQVMsR0FBRyxJQUFJLGlCQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7QUFFN0MsU0FBUyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBVSxLQUFZO0lBQzFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFhLENBQUM7SUFDN0IsSUFBSSxTQUFTLEdBQUcsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ25DLElBQUksYUFBYSxHQUFHLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUVsQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksTUFBTSxhQUFhLEtBQUssU0FBUyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFJLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDO0FBQzFJLENBQUMsQ0FBQyxDQUFDO0FBRUgsU0FBUztLQUNOLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxlQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDakQsR0FBRyxDQUFDLHdCQUF3QixDQUFDLGVBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUN0RCxHQUFHLENBQUMsd0JBQXdCLENBQUMsZUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3BELEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0tBQ3ZCLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBRXpCLFNBQVMsd0JBQXdCLENBQUMsSUFBa0I7SUFDbEQsSUFBSSxLQUFZLENBQUM7SUFDakIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ1YsSUFBSSxZQUFvQixDQUFDO0lBRXpCLFNBQVMsQ0FBQyxjQUFXLENBQUMsU0FBUyxFQUFFLFdBQVcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRXZELE9BQU87UUFDTCxJQUFJLEVBQUUsSUFBSTtRQUNWLEtBQUssRUFBRSxJQUFJO1FBQ1gsS0FBSyxFQUFFLEdBQUcsRUFBRTtZQUNWLEtBQUssR0FBRyxJQUFJLFFBQUssQ0FBQztnQkFDaEIsR0FBRyxFQUFFLFVBQVUsSUFBSSxFQUFFO2dCQUNyQixNQUFNLEVBQUUsVUFBTyxDQUFDLEVBQUU7Z0JBQ2xCLFFBQVEsRUFBRSxVQUFVLENBQUMsRUFBRSxFQUFFO2dCQUN6QixJQUFJO2FBQ0wsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUNELEVBQUUsRUFBRSxVQUFnQixDQUFnQjs7Z0JBQ2xDLE1BQU0sTUFBTSxHQUFHLE1BQU0sS0FBSyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztnQkFDckQsWUFBWSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQzNCLFlBQVksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQztnQkFFMUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2QsQ0FBQztTQUFBO1FBQ0QsUUFBUSxFQUFFLEdBQUcsRUFBRTtZQUNiLDJCQUEyQjtRQUM3QixDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFFRCxTQUFTLGdCQUFnQjtJQUN2QixNQUFNLFdBQVcsR0FBRyxjQUFXLENBQUMsU0FBUyxFQUFFLDZCQUE2QixDQUFDLENBQUM7SUFDMUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRVYsU0FBUyxDQUFDLGNBQVcsQ0FBQyxTQUFTLEVBQUUscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0lBRXpELE9BQU87UUFDTCxJQUFJLEVBQUUsV0FBVztRQUNqQixLQUFLLEVBQUUsSUFBSTtRQUNYLEtBQUssRUFBRSxHQUFHLEVBQUU7UUFFWixDQUFDO1FBQ0QsRUFBRSxFQUFFLFVBQWdCLENBQWdCOztnQkFDbEMsTUFBTSxVQUFVLEdBQUcsY0FBVyxDQUFDLFNBQVMsRUFBRSw0QkFBNEIsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUVqRixJQUFJLENBQUMsZUFBZSxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxLQUFLLEVBQUUsQ0FBQztvQkFDaEUsbUVBQW1FO3FCQUNsRSxJQUFJLENBQUMsc0JBQWlCLENBQUMsV0FBVyxDQUFDLENBQUM7cUJBQ3BDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFO29CQUNqQixNQUFNLEVBQUU7eUJBQ0wsS0FBSyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLEtBQUssRUFBRSxDQUFDLENBQUM7eUJBQ3pFLFVBQVUsQ0FBQyxNQUFNLENBQUM7eUJBQ2xCLEtBQUssQ0FBQyxXQUFXLENBQUM7eUJBQ2xCLFVBQVUsQ0FBQyxNQUFNLENBQUM7eUJBQ2xCLElBQUksQ0FBQyxVQUFVLENBQUM7eUJBQ2hCLEVBQUUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQzt3QkFDM0IsZ0NBQWdDO3dCQUNoQyw2Q0FBNkM7d0JBQzdDLEtBQUs7eUJBQ0osRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUU7d0JBQ2QsZUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO3dCQUN4QixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7b0JBQ2QsQ0FBQyxDQUFDLENBQUM7Z0JBQ1AsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDO1NBQUE7UUFDRCxRQUFRLEVBQUUsR0FBRyxFQUFFO1lBQ2IseUJBQXlCO1FBQzNCLENBQUM7S0FDRixDQUFBO0FBQ0gsQ0FBQztBQUVELFNBQVMsbUJBQW1CLENBQUMsRUFBTztJQUNsQyxJQUFJLGNBQWMsR0FBRyxZQUFZLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7SUFDbEQsSUFBSSxrQkFBa0IsR0FBRyxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUM7SUFFdkQsT0FBTyxHQUFHLGtCQUFrQixNQUFNLENBQUM7QUFDckMsQ0FBQztBQUVELFNBQVMsY0FBYyxDQUFDLEVBQU87SUFDN0IsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUNsQixJQUFJLElBQUksR0FBRyxLQUFLLENBQUM7SUFFakIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1FBQ2IsS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUNaLElBQUksR0FBRyxLQUFLLENBQUM7S0FDZDtJQUVELElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtRQUNiLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDWixJQUFJLEdBQUcsTUFBTSxDQUFDO0tBQ2Y7SUFFRCxPQUFPLEdBQUcsd0JBQVksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQVEsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDO0FBQ2xFLENBQUM7QUFFRCxTQUFTLGFBQWEsQ0FBQyxLQUFhO0lBQ2xDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQztJQUN2QixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsU0FBUyxFQUFFO1FBQy9CLE9BQU8sR0FBRyxLQUFLLElBQUksQ0FBQztLQUNyQjtJQUNELE1BQU0sS0FBSyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9ELElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ1gsR0FBRztRQUNELEtBQUssSUFBSSxTQUFTLENBQUM7UUFDbkIsRUFBRSxDQUFDLENBQUM7S0FDTCxRQUFRLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksU0FBUyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtJQUMvRCxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUMzQyxDQUFDIn0=